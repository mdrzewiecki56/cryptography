{"version":3,"sources":["NewSourceForm.js","Homophonic.js","Task.js","TaskList.js","App.js","serviceWorker.js","index.js"],"names":["NewSourceForm","props","state","inputText","inputCryptogram","cipherType","inputFile","cryptogramFile","handleChange","bind","handleSubmit","handleTextFile","handleCryptoFile","evt","target","value","name","this","setState","preventDefault","newTask","newId","uuid","file","key","id","createTask","text","files","reader","FileReader","readAsText","onload","e","result","console","log","onSubmit","className","htmlFor","class","type","placeholder","toLowerCase","onChange","disabled","Component","Homophonic","input","alphabet","Map","cyphered","cypher","output","Array","from","i","length","swap","join","decyphered","reswap","char","pack","get","postition","Math","floor","random","charAt","codedLetter","entries","includes","Task","saveFile","decypheredText","task","fileContents","a","document","createElement","dataURI","btoa","href","createEvent","initMouseEvent","defaultView","dispatchEvent","decypher","onClick","TaskList","create","tasks","map","App","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2dd9cd39.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport uuid from 'uuid/v4';\n\nclass NewSourceForm extends Component {\n    constructor(props) {\n        super(props);\n        this.state = { inputText: '', inputCryptogram: '', cipherType: '', inputFile: '', cryptogramFile: '' };\n\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.handleTextFile = this.handleTextFile.bind(this);\n        this.handleCryptoFile = this.handleCryptoFile.bind(this);\n    }\n\n    handleChange(evt) {\n        const target = evt.target;\n        const value = target.value;\n        const name = target.name;\n    \n        this.setState({\n          [name]: value\n        });\n    }\n\n    handleSubmit(evt) {\n        evt.preventDefault();\n        let newId = uuid();\n        let newTask;\n        if (evt.target.file !== undefined)\n            newTask = {...this.state, key: newId, id: newId};\n        else\n            newTask = {...this.state, key: newId, id: newId};\n\n        this.props.createTask(newTask);\n        this.setState({ inputText: '', inputCryptogram: '', inputFile: '', cryptogramFile: ''});\n    }\n\n    handleTextFile(evt){\n            let files = evt.target.files;\n            let reader = new FileReader();\n            let text;\n            reader.readAsText(files[0])\n            reader.onload = (e) =>{\n                text = reader.result;\n                console.log(text);\n                this.setState({inputText: text});\n            };\n    }\n\n    handleCryptoFile(evt){\n        let files = evt.target.files;\n        let reader = new FileReader();\n        let text;\n        reader.readAsText(files[0])\n        reader.onload = (e) =>{\n            text = reader.result;\n            console.log(text);\n            this.setState({inputCryptogram: text});\n        };\n}\n\n\n    render() {\n        return (\n            <form onSubmit={this.handleSubmit} className=\"newTaskForm col-md-6 col-md-offset-5\">\n\n                <div className=\"form-row\">\n                    <label htmlFor=\"inputText\" className=\"col-sm-2 col-form-label col-form-label\">Text: </label>\n                        <div class=\"col-sm-10\">\n                            <input\n                                type=\"text\"\n                                placeholder=\"inputText\"\n                                id=\"inputText\"\n                                name=\"inputText\"\n                                value={this.state.inputText.toLowerCase()}\n                                onChange={this.handleChange}\n                                className=\"form-control\" />\n                        </div>\n                    </div>\n\n                    <div className=\"form-row\">\n                        <label htmlFor=\"inputFile\" className=\"col-sm-2 col-form-label col-form-label\">File with text: </label>\n                            <div class=\"col-sm-10\">\n                                <input\n                                    type=\"file\"\n                                    name=\"inputFile\" \n                                    onChange={this.handleTextFile} \n                                    value={this.state.inputFile}\n                                    className=\"custom-file\"/>\n                            </div>\n                    </div>\n                    \n                    <div className=\"form-row\">\n                        <label htmlFor=\"inputCryptogram\" className=\"col-sm-2 col-form-label col-form-label\">Cryptogram: </label>\n                            <div class=\"col-sm-10\">\n                                <input\n                                    type=\"text\"\n                                    placeholder=\"inputCryptogram\"\n                                    id=\"inputCryptogram\"\n                                    name=\"inputCryptogram\"\n                                    value={this.state.inputCryptogram.toLowerCase()}\n                                    onChange={this.handleChange} \n                                    className=\"form-control\"\n                                    disabled/>\n                            </div>\n                    </div>\n\n                    <div className=\"form-row\">\n                        <label htmlFor=\"cryptogramFile\" className=\"col-sm-2 col-form-label col-form-label\">File with cryptogram: </label>\n                            <div class=\"col-sm-10\">\n                                <input\n                                    type=\"file\"\n                                    name=\"cryptogramFile\" \n                                    onChange={this.handleCryptoFile}\n                                    value={this.state.cryptogramFile}\n                                    className=\"custom-file\"\n                                    disabled/>\n                            </div>\n                    </div>\n\n                    <div className=\"form-row\">\n                            <label htmlFor=\"cipherType\" className=\"col-sm-2 col-form-label col-form-label\">Cypher type: </label>\n                        <div class=\"col-sm-1\">\n                            <select value={this.state.cipherType} className=\"custom-select mr-sm-2\" onChange={this.handleChange} name=\"cipherType\">\n                                <option value=\"\"></option>\n                                <option value=\"homophonic\">?</option>\n                            </select>\n                        </div>\n                    </div>\n\n                    <div className=\"form-row\">\n                        <button>Submit</button>\n                    </div>\n            </form>\n        );\n    }\n}\n\nexport default NewSourceForm;\n","class Homophonic {\r\n\r\n    constructor(input){\r\n        this.input = input;\r\n        this.alphabet = new Map([\r\n            ['a', \"ki\"],\r\n            ['b', \"d\"],\r\n            ['c', \",\"],\r\n            ['d', \"z\"],\r\n            ['e', \"apof\"],\r\n            ['f', \"e\"],\r\n            ['g', \"g\"],\r\n            ['h', \"q\"],\r\n            ['i', \"y\"],\r\n            ['j', \"w\"],\r\n            ['k', \"m\"],\r\n            ['l', \":\"],\r\n            ['m', \"u\"],\r\n            ['n', \"h\"],\r\n            ['o', \"bc\"],\r\n            ['p', \"v\"],\r\n            ['q', \"j\"],\r\n            ['r', \"-\"],\r\n            ['s', \"h\"],\r\n            ['t', \"rst\"],\r\n            ['u', \"l\"],\r\n            ['v', \"y\"],\r\n            ['w', \"5\"],\r\n            ['x', \"n\"],\r\n            ['y', \"x\"],\r\n            ['z', \"0\"],\r\n            [' ', \"[\"],\r\n            ['.', \"2\"],\r\n            [',', \"7\"],\r\n            ['-', \"]\"],\r\n            [':', \"8\"]\r\n        ]);\r\n\r\n        this.cyphered = this.cypher();\r\n    }\r\n    \r\n    cypher(){\r\n        var output = Array.from(this.input);\r\n        for (let i = 0;i<output.length;i++){\r\n            output[i]=this.swap(output[i]);\r\n        }\r\n\r\n        return output.join(\"\");\r\n    }\r\n\r\n    decypher(){\r\n        let decyphered = Array.from(this.cyphered);\r\n        for(let i = 0;i<this.cyphered.length;i++){\r\n            decyphered[i] = this.reswap(decyphered[i]);\r\n            console.log(decyphered);\r\n        }\r\n\r\n        return decyphered.join(\"\");\r\n    }\r\n\r\n    swap(char){\r\n        let pack = this.alphabet.get(char);\r\n        let postition = Math.floor(Math.random() * pack.length);\r\n\r\n        return pack.charAt(postition);\r\n    }\r\n\r\n    reswap(char){\r\n        let codedLetter;\r\n        for (let [key, value] of this.alphabet.entries()) {\r\n            if (value.includes(char))\r\n                codedLetter = key;    \r\n        }\r\n        return codedLetter;\r\n    }\r\n\r\n}\r\n\r\nexport default Homophonic;","import React, {Component} from 'react';\r\nimport Homophonic from './Homophonic'\r\n\r\n\r\nclass Task extends Component {\r\n    constructor(){\r\n        super();\r\n        this.saveFile = this.saveFile.bind(this);\r\n    }\r\n\r\n    saveFile(decypheredText,task){\r\n        var fileContents =             \r\n        \"Text:\" + this.props.inputText +\r\n        \"\\nCryptogram:\" + this.props.inputCryptogram +\r\n        \"\\nCipherType:\" + this.props.cipherType +\r\n        \"\\nCoded message:\" + task.cyphered +\r\n        \"\\nDecoded message for validity check:\" + decypheredText;\r\n        var filename = \"output.txt\";\r\n        var filetype = \"text/plain\";\r\n\r\n        var a = document.createElement(\"a\");\r\n        var dataURI = \"data:\" + filetype +\r\n            \";base64,\" + btoa(fileContents);\r\n        a.href = dataURI;\r\n        a['download'] = filename;\r\n        var e = document.createEvent(\"MouseEvents\");\r\n        // Use of deprecated function to satisfy TypeScript.\r\n        e.initMouseEvent(\"click\", true, false,\r\n            document.defaultView, 0, 0, 0, 0, 0,\r\n            false, false, false, false, 0, null);\r\n        a.dispatchEvent(e);\r\n    }\r\n\r\n\r\n\r\n    render(){\r\n        let newTask = new Homophonic(this.props.inputText);\r\n        let decyphered = newTask.decypher();\r\n\r\n        return(\r\n        <div className=\"row\">\r\n            <div className=\"col-md-6\">\r\n                <p>Text: {this.props.inputText}</p>\r\n                {/* <p>Cryptogram: \"{this.props.inputCryptogram}\"</p> */}\r\n                {/* <p>CipherType: {this.props.cipherType}</p> */}\r\n                <p>Coded message: {newTask.cyphered}</p>\r\n                <p>Decoded message for validity check: {decyphered}</p>\r\n                <button onClick={(decyphered,newTask) => this.saveFile(newTask,decyphered)}>Save to File!</button>\r\n                <hr></hr>\r\n            </div>\r\n        </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Task;","import React, {Component} from 'react';\r\nimport NewSourceForm from './NewSourceForm'\r\nimport Task from './Task'\r\nimport './TaskList.scss';\r\n\r\nclass TaskList extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {TaskList: []};\r\n\r\n        this.create = this.create.bind(this);\r\n    }\r\n\r\n    create(newTask){\r\n        this.setState({\r\n            TaskList: [...this.state.TaskList, newTask]\r\n        }); \r\n    }\r\n\r\n    render(){\r\n        const tasks = this.state.TaskList.map((task) =>\r\n        <Task \r\n        inputText={task.inputText}\r\n        inputCryptogram={task.inputCryptogram}\r\n        cipherType={task.cipherType}\r\n        key = {task.key}\r\n        id = {task.key}\r\n        />);\r\n\r\n        return(\r\n        <div className=\"TaskList\">\r\n            <div className=\"row\">\r\n                <NewSourceForm createTask={this.create}/>\r\n            </div>\r\n            {tasks}\r\n        </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TaskList;","import React, {Component} from 'react';\nimport './App.scss';\nimport TaskList from './TaskList';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nclass App extends Component {\n    render(){\n        return (\n            <div className=\"App text-center container-fluid\">\n                <h1>Cypher.io</h1>\n                <TaskList />\n            </div>\n        );\n    }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}