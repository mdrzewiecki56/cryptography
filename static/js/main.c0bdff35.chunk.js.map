{"version":3,"sources":["NewSourceForm.js","Homophonic.js","Task.js","TaskList.js","App.js","serviceWorker.js","index.js"],"names":["NewSourceForm","props","state","inputText","inputCryptogram","cipherType","inputFile","cryptogramFile","handleChange","bind","handleSubmit","handleTextFile","handleCryptoFile","evt","target","value","name","this","setState","preventDefault","newTask","newId","uuid","file","key","id","createTask","text","files","reader","FileReader","readAsText","onload","e","result","console","log","onSubmit","className","htmlFor","type","placeholder","toLowerCase","onChange","disabled","Component","Homophonic","input","alphabet","Map","cyphered","cypher","output","Array","from","i","length","swap","join","decyphered","reswap","char","pack","get","undefined","postition","Math","floor","random","charAt","codedLetter","entries","includes","Task","saveFile","fileContents","a","document","createElement","dataURI","btoa","href","createEvent","initMouseEvent","defaultView","dispatchEvent","decypher","onClick","PureComponent","TaskList","create","tasks","map","task","App","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c0bdff35.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport uuid from 'uuid/v4';\r\n\r\nclass NewSourceForm extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { inputText: '', inputCryptogram: '', cipherType: '', inputFile: '', cryptogramFile: '' };\r\n\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.handleTextFile = this.handleTextFile.bind(this);\r\n        this.handleCryptoFile = this.handleCryptoFile.bind(this);\r\n    }\r\n\r\n    handleChange(evt) {\r\n        const target = evt.target;\r\n        const value = target.value;\r\n        const name = target.name;\r\n\r\n        this.setState({\r\n          [name]: value\r\n        });\r\n    }\r\n\r\n    handleSubmit(evt) {\r\n        evt.preventDefault();\r\n        let newId = uuid();\r\n        let newTask;\r\n        if (evt.target.file !== undefined)\r\n            newTask = {...this.state, key: newId, id: newId};\r\n        else\r\n            newTask = {...this.state, key: newId, id: newId};\r\n\r\n        this.props.createTask(newTask);\r\n        this.setState({ inputText: '', inputCryptogram: '', inputFile: '', cryptogramFile: ''});\r\n    }\r\n\r\n    handleTextFile(evt){\r\n            let files = evt.target.files;\r\n            let reader = new FileReader();\r\n            let text;\r\n            reader.readAsText(files[0])\r\n            reader.onload = (e) =>{\r\n                text = reader.result;\r\n                console.log(text);\r\n                this.setState({inputText: text});\r\n            };\r\n    }\r\n\r\n    handleCryptoFile(evt){\r\n        let files = evt.target.files;\r\n        let reader = new FileReader();\r\n        let text;\r\n        reader.readAsText(files[0])\r\n        reader.onload = (e) =>{\r\n            text = reader.result;\r\n            console.log(text);\r\n            this.setState({inputCryptogram: text});\r\n        };\r\n}\r\n\r\n\r\n    render() {\r\n        return (\r\n            <form onSubmit={this.handleSubmit} className=\"newTaskForm col-md-6 offset-md-3\">\r\n\r\n                <div className=\"form-row\">\r\n                    <label htmlFor=\"inputText\" className=\"col-sm-2 col-form-label col-form-label\">Text: </label>\r\n                        <div className=\"col-sm-10\">\r\n                            <input\r\n                                type=\"text\"\r\n                                placeholder=\"inputText\"\r\n                                id=\"inputText\"\r\n                                name=\"inputText\"\r\n                                value={this.state.inputText.toLowerCase()}\r\n                                onChange={this.handleChange}\r\n                                className=\"form-control\" />\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"form-row\">\r\n                        <label htmlFor=\"inputFile\" className=\"col-sm-2 col-form-label col-form-label\">File with text: </label>\r\n                            <div className=\"col-sm-10\">\r\n                                <input\r\n                                    type=\"file\"\r\n                                    name=\"inputFile\" \r\n                                    onChange={this.handleTextFile} \r\n                                    value={this.state.inputFile}\r\n                                    className=\"custom-file\"/>\r\n                            </div>\r\n                    </div>\r\n                    \r\n                    <div className=\"form-row\">\r\n                        <label htmlFor=\"inputCryptogram\" className=\"col-sm-2 col-form-label col-form-label\">Cryptogram: </label>\r\n                            <div className=\"col-sm-10\">\r\n                                <input\r\n                                    type=\"text\"\r\n                                    placeholder=\"inputCryptogram\"\r\n                                    id=\"inputCryptogram\"\r\n                                    name=\"inputCryptogram\"\r\n                                    value={this.state.inputCryptogram.toLowerCase()}\r\n                                    onChange={this.handleChange} \r\n                                    className=\"form-control\"\r\n                                    disabled/>\r\n                            </div>\r\n                    </div>\r\n\r\n                    <div className=\"form-row\">\r\n                        <label htmlFor=\"cryptogramFile\" className=\"col-sm-2 col-form-label col-form-label\">File with cryptogram: </label>\r\n                            <div className=\"col-sm-10\">\r\n                                <input\r\n                                    type=\"file\"\r\n                                    name=\"cryptogramFile\" \r\n                                    onChange={this.handleCryptoFile}\r\n                                    value={this.state.cryptogramFile}\r\n                                    className=\"custom-file\"\r\n                                    disabled/>\r\n                            </div>\r\n                    </div>\r\n\r\n                    <div className=\"form-row\">\r\n                            <label htmlFor=\"cipherType\" className=\"col-sm-2 col-form-label col-form-label\">Cypher type: </label>\r\n                        <div className=\"col-sm-1\">\r\n                            <select value={this.state.cipherType} className=\"custom-select mr-sm-2\" onChange={this.handleChange} name=\"cipherType\">\r\n                                <option value=\"\"></option>\r\n                                <option value=\"homophonic\">?</option>\r\n                            </select>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"form-row\">\r\n                        <div className=\"col-sm-12\">\r\n                            <button className=\"btn btn-light\">Submit</button>\r\n                        </div>\r\n                    </div>\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\nexport default NewSourceForm;\r\n","class Homophonic {\r\n\r\n    constructor(input){\r\n        this.input = input;\r\n        this.alphabet = new Map([\r\n            ['a', \"ki\"],\r\n            ['b', \"d\"],\r\n            ['c', \",\"],\r\n            ['d', \"z\"],\r\n            ['e', \"apof\"],\r\n            ['f', \"e\"],\r\n            ['g', \"g\"],\r\n            ['h', \"q\"],\r\n            ['i', \"9\"],\r\n            ['j', \"w1\"],\r\n            ['k', \"m\"],\r\n            ['l', \":\"],\r\n            ['m', \"u34\"],\r\n            ['n', \"6\"],\r\n            ['o', \"bc\"],\r\n            ['p', \"v\"],\r\n            ['q', \"j\"],\r\n            ['r', \"-\"],\r\n            ['s', \"h\"],\r\n            ['t', \"rs\"],\r\n            ['u', \"l\"],\r\n            ['v', \"y\"],\r\n            ['w', \"5\"],\r\n            ['x', \"n\"],\r\n            ['y', \"x\"],\r\n            ['z', \"0\"],\r\n            [' ', \"[\"],\r\n            ['.', \"2\"],\r\n            [',', \"7\"],\r\n            ['-', \"]\"],\r\n            [':', \"8\"]\r\n        ]);\r\n\r\n        this.cyphered = this.cypher();\r\n    }\r\n    \r\n    cypher(){\r\n        var output = Array.from(this.input);\r\n        for (let i = 0;i<output.length;i++)\r\n            output[i]=this.swap(output[i]);\r\n\r\n        return output.join(\"\");\r\n    }\r\n\r\n    decypher(){\r\n        let decyphered = Array.from(this.cyphered);\r\n        for(let i = 0;i<this.cyphered.length;i++)\r\n            decyphered[i] = this.reswap(decyphered[i]);\r\n\r\n        return decyphered.join(\"\");\r\n    }\r\n\r\n    swap(char){\r\n        let pack = this.alphabet.get(char);\r\n        if (pack === undefined)\r\n            return '?';\r\n        let postition = Math.floor(Math.random() * pack.length);\r\n\r\n        return pack.charAt(postition);\r\n    }\r\n\r\n    reswap(char){\r\n        let codedLetter;\r\n        if (char === undefined || char === 'E')\r\n            return '?';\r\n\r\n        for (let [key, value] of this.alphabet.entries()) {\r\n            if (value.includes(char))\r\n                codedLetter = key;    \r\n        }\r\n        return codedLetter;\r\n    }\r\n\r\n}\r\n\r\nexport default Homophonic;","import React, {PureComponent} from 'react';\r\nimport Homophonic from './Homophonic'\r\n\r\n\r\nclass Task extends PureComponent {\r\n    constructor(){\r\n        super();\r\n        this.saveFile = this.saveFile.bind(this);\r\n    }\r\n\r\n    saveFile(decyphered,cyphered){\r\n        var fileContents =             \r\n        \"Text:\" + this.props.inputText +\r\n        //\"\\nCryptogram:\" + this.props.inputCryptogram +\r\n        //\"\\nCipherType:\" + this.props.cipherType +\r\n        \"\\n\\nCoded message:\" + cyphered +\r\n        \"\\n\\nDecoded message for validity check:\" + decyphered;\r\n        var filename = \"output.txt\";\r\n        var filetype = \"text/plain\";\r\n\r\n        var a = document.createElement(\"a\");\r\n        var dataURI = \"data:\" + filetype +\r\n            \";base64,\" + btoa(fileContents);\r\n        a.href = dataURI;\r\n        a['download'] = filename;\r\n        var e = document.createEvent(\"MouseEvents\");\r\n        // Use of deprecated function to satisfy TypeScript.\r\n        e.initMouseEvent(\"click\", true, false,\r\n            document.defaultView, 0, 0, 0, 0, 0,\r\n            false, false, false, false, 0, null);\r\n        a.dispatchEvent(e);\r\n    }\r\n\r\n\r\n\r\n    render(){\r\n        let newTask = new Homophonic(this.props.inputText.toLowerCase());\r\n        let decyphered = newTask.decypher();\r\n        let cyphered = newTask.cyphered;\r\n\r\n        return(\r\n        <div className=\"row\">\r\n            <div className=\"col-md-6 offset-md-3 task\">\r\n                <p>Text: {this.props.inputText}</p>\r\n                {/* <p>Cryptogram: \"{this.props.inputCryptogram}\"</p> */}\r\n                {/* <p>CipherType: {this.props.cipherType}</p> */}\r\n                <p>Coded message: {cyphered}</p>\r\n                <p>Decoded message for validity check: {decyphered}</p>\r\n                <button onClick={() => this.saveFile(decyphered,cyphered)} className=\"btn btn-light\">Save to File!</button>\r\n                <hr></hr>\r\n            </div>\r\n        </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Task;","import React, {Component} from 'react';\r\nimport NewSourceForm from './NewSourceForm'\r\nimport Task from './Task'\r\nimport './TaskList.scss';\r\n\r\nclass TaskList extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {TaskList: []};\r\n\r\n        this.create = this.create.bind(this);\r\n    }\r\n\r\n    create(newTask){\r\n        this.setState({\r\n            TaskList: [...this.state.TaskList, newTask]\r\n        }); \r\n    }\r\n\r\n    render(){\r\n        const tasks = this.state.TaskList.map((task) =>\r\n        <Task \r\n        inputText={task.inputText}\r\n        inputCryptogram={task.inputCryptogram}\r\n        cipherType={task.cipherType}\r\n        key = {task.key}\r\n        id = {task.key}\r\n        />);\r\n\r\n        return(\r\n        <div className=\"TaskList\">\r\n            <div className=\"row\">\r\n                <NewSourceForm createTask={this.create}/>\r\n            </div>\r\n            {tasks}\r\n        </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TaskList;","import React, {Component} from 'react';\r\nimport './App.scss';\r\nimport TaskList from './TaskList';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nclass App extends Component {\r\n    render(){\r\n        return (\r\n            <div className=\"App text-center container-fluid\">\r\n                <h1>Cypherio</h1>\r\n                <TaskList />\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}